1

Introduction 1.1 About this document This paper represents a result of the Open Watcom low level GUI library research.
It provides porting guidelines and identifies the effort required to port the GUI library to Linux platform using GTK windowing toolkit for the X Window System.
The research was based on the Open Watcom version 1.1.7 This paper is intended as a base Software Requirements Specification for the Open Watcom GUI porting project.
1.2 Document structure This document consists of several parts.
?GTK Overview? provides a short overview of the GIMP Toolkit ?General GUI Porting Approach? describes a porting approach.
?Issues? identifies a set of possible caveats that should be considered before commencing the porting effort.
?Target System Requirements? provides information about required software on a target system for the ported library to run.
?Detailed Porting Guidelines and Estimation? provides detailed guidelines on porting each library function.
"It is licensed using the LGPL license, so open software, free software, or commercial non-free software can be developed using GTK without having to spend costs on licenses or royalties."
GTK is essentially an object oriented application ?programmers interface (API).
"Although written completely in C, it is implemented using the idea of classes and callback functions (pointers to functions)."
"There is also a third component called GLib which contains a few replacements for some standard calls, as well as some additional functions for handling linked lists, etc."
"The replacement functions are used to increase GTK's portability, as some of the functions implemented here are not available or are non-standard on other Unixes (one example being g_strerror)()."
"Some also contain enhancements to the libc versions, such as g_malloc() that has enhanced debugging utilities."
"As the last component, GTK uses the Pango library for internationalized text output."
General GUI Porting Approach The Watcom GUI library depends on the Watcom Programming Interface (WPI) and Memory Tracker (TrMem) libraries.
WPI is explicitly designed to port Windows functionality to OS/2 Presentation Manager (not the other way around).
Both Windows and OS/2 APIs have similar and compatible designs to a large extent.
"GTK API is similar neither to Windows nor to OS/2 API, so it would be ineffective to extend the WPI library with GTK support."
However taking into account that the Watcom GUI library actively uses WPI calls it seems reasonable to port most of the WPI functions called in the library.
"Since the GUI library relies on OS/2 PM and Windows API, it uses predefined types that exist only in these environments, such as HWND and HBRUSH."
It will be an additional work for the programmer to add appropriate type definitions in a special file.
"For instance, HWND should be defined as GtkWidget*, and HBRUSH should be defined as GdkStyle*."
? Resource files There is no possibility in GTK to handle the Windows or OS/2 ? style resource files.
GTK uses its own resource files which are very much different from those in Windows or OS/2 and allows to specify only styles and key bindings of the widgets.
There is a possibility to overcome this issue to some extent by using libglade library which is used in GTK to build user interface described in the XML file.
A utility can be written to extract all the necessary information from the Windows ? OS/2 resource files and present it in the XML format which can be handled by libglade to build a user interface.
However this will provide only a partial solution as there is nothing like String Table in libglade as string resources are handled by gettext library in GTK.
Also there are no numeric resource identifiers in GTK.
"Problematic functions are: GUICreateResDialog(), GUICreateDialogFromRes() and GUILoadString()."
"? MDI ""Windows in Window"" model GTK has no possibility to implement applications with MDI ""Windows in Window"" model."
"However, it is possible to assign a parent for windows, and they will be destroyed when the parent is closed."
"? Help subsystem GTK has no built in user help subsystem, as this level of user interaction is handled by desktop environments."
"Problematic functions here are: GUIHelpInit(), GUIHelpFini(), GUIShowHelp(), GUIDisplayHelp(), GUIDisplayHelpWin4() and GUIDisplayHelpId()."
Other issues to consider include: ? Numeric identifiers of widgets.
? Specific approach to window building includes Window Classes and Dialog Templates.
"? The toolkit allows modifying window (system) menu, which is impossible in GTK."
"Target System Requirements GTK is broadly adopted among the major Linux distribution vendors including RedHat, SuSE, TurboLinux."
"So, in general case deployment of the ported library should not be a problem."
"In case the target distribution does not support GTK at all or uses incompatible or older versions of the toolkit the library can be linked statically, the drawback of this approach will be an increased size of the library."
"In situations when the library would be shipped in source files and then compiled, target system will have to satisfy to a number of requirements."
Namely it must have a C compiler and an X Window System including the following libraries: GUIInitDialogFunc Callback function the test dialog box used to get the dialog box font and client size information.
Time needed for porting: 4 hour(s).
"The similar behaviour could be achieved in GTK by emitting ""delete_event"" to the given window."
Time needed for porting: 1 hour(s).
"Summary 6.5 hours are needed for porting activity and, additionally, approximately 3.5 hours are needed for testing and tuning."
This step requires 10 hours.
At the end of this step we will be able to execute the following code.
This function calculates coordinates of the new window.
"Instead of using _wpi_getclientrect() to get client area coordinates of the window, programmers should use gtk_widget_get_request_size()."
Time needed for porting: 2 hours.
In OS/2 PM this allocates space for the object structure and sets the foreground colour for the brush.
For GTK this should create GtkStyle structure with the given parameters.
Time needed for porting: 2 hours.
"When ported, this function should make a call of gtk_window_new(), and apply parameters passed in info."
"After the window is created, it is necessary to put GtkScrolledWindow widget in it and then put GtkFixed widget in the scrolled window widget."
See ?General Porting Approach? section.
Time needed for porting: 4 hours.
Should be done via gdk_window_thaw_updates() and gdk_window_freeze_updates() Time needed for porting: 1 hour.
GUIMaximizeWindow This function maximizes the specified window.
In order to ask the window manager to maximize the window in GTK gtk_window_maximize() should be called.
Time needed for porting: 1 hour.
GUIMinimizeWindow This function minimizes the specified window.
"In order to ask window manager to minimize the window in GTK, gtk_window_minimize() should be called."
Time needed for porting: 1 hour.
Windows predefined states are used.
In the GTK gtk_widget_show() and gtk_window_hide() should be used.
Time needed for porting: 1 hour.
GUIShowWindowNA Shows the window.
GUIFreeWindowMemory Frees all resources related to the given window.
In GTK gtk_object_destory() should be called which automatically will destroy all children.
Some additional tweaking may be needed.
Time needed for porting: 2 hours.
"Summary 19 hours are needed for porting activity and, additionally, approximately 16 more hours are needed for testing and tuning."
This step requires 35 hours.
At the finish of this step we will be able to execute the following code.
There are no dialog templates in GTK.
"However, Open Watcom GUI Library adds controls to dialog templates, so we will create a dialog in this function."
Time needed for porting: 2 hours.
AddControl Adds control to the specified dialog template.
There is big amount of work here.
"This function should create all necessary controls, and apply specified attributes for every requested control."
Depending on type of the control and attributes various GTK functions should be used.
Time needed for porting: 8 hours.
DoneAddingControls Called when there are no more controls.
Should be empty in GTK port.
Time needed for porting: 0.5 hour.
DynamicDialogBox Creates a dynamic dialog box.
"Should do nothing in GTK port, since DialogTemplate() function created the dialog."
Time needed for porting: 0.5 hour.
GUIDialogFunc Callback function for all dynamically created dialogs.
Should be rewritten for GTK version.
"The callback should correctly process resizing ""resize- request"" and ""close"" events."
Time needed for porting: 2 hours.
GUIDestroyWnd Destroys the given window or all windows if NULL.
"In GTK port, the function should call gtk_widget_destroy() for the given window or for the top- level window if NULL."
Time needed for porting: 2 hours GUIGetText Returns a copy of the text.
"Should be greatly modified in GTK port, but it is a straightforward task."
"Text of almost all widgets could be retrieved via gtk_label_get_label(), and gtk_button_get_label()."
Note that returned string will be owned by a widget and must not be modified or freed.
"So, it is needed to duplicate them in this function."
Selection of GtkTreeView could be accessed via gtk_tree_view_get_selection() function.
Time needed for porting: 6 hours.
GUISendMessage Sends a message to the specified window.
Time needed for porting: 1 hour.
GUIWndDirty Tells the user interface that interface should be repainted.
Time needed for porting: 1 hour.
GUIGetMetrics Returns text metrics for font of the given window.
GUIGetDC() and GUIReleaseDC should not be called in GTK port.
There is no need to work on so low level in GTK.
"GUIGetClientRect Returns scaled, depending upon current scaling settings, rectangle of the given window in absolute coordinates."
"Note, that client area of the window is the area of the GtkScrolledWindow widget placed in the window."
The similar functionality in GTK should be achieved by gtk_widget_translate_coordinates().
Note that there is no definition similar to HWND_DESKTOP in GTK.
Time needed for porting: 2 hours.
Should be rewritten using GdkRectangle type.
Time needed for porting: 0.5 hours.
Should be rewritten using GdkRectangle structure.
Time needed for porting: 0.5 hours.
DrawRect Draws specified rectangle in the given window.
Should be rewritten.
GTK paint functions applied to the GtkFixed widget placed in the window should be used for this purpose.
This approach will allow avoiding all the sub-calls.
Time needed for porting: 4 hours.
GUIXDrawText Draws specified text in the given window.
"pango_layout_set_text() should be used for text rendering, and gtk_paint_layout() applied to GtkFixed widget placed in the window should be used for drawing."
This approach will allow avoiding all the sub-calls.
Time needed for porting: 6 hours.
Summary 41 hours are needed for porting activity and approximately 24 more hours are required for testing and tuning.
Common control functions There are a couple of common window control functions in the Open Watcom GUI Library.
Below is the list of them with their sub-calls.
Adds a control to a window.
The function should create an appropriate control with appropriate styles and other attributes in the requested position.
Already described AddControl should be used here.
Time needed for porting: 5 hours.
GUIResizeControl Set size and location of a control (relative parent).
Instead of using _wpi_getdlgitem() it is needed to use GUIGetControlByID() because the last is portable.
Instead of using _wpi_movewindow() it is needed to use gtk_fixed_move() to move the specified control in the fixed widget of window where the control is located.
Time needed for porting: 0.5 hour.
GUIEnableControl Sets control enabled or not enabled.
Instead of using _wpi_movewindow() it is need to use gtk_fixed_move() to move the specified control in the fixed widget of window where the control is located.
Time needed for porting: 1 hour.
Time needed for porting: 0.5 hour.
GUIIsControlEnabled Checks if control is enabled.
Instead of using _wpi_movewindow() it is needed to use gtk_fixed_move() to move the specified control in the fixed widget of window where the control is located.
Time needed for porting: 1 hour.
Time needed for porting: 0.5 hour.
GUIGetControlRect Gets location of a control relative to the parent.
Instead of using _wpi_movewindow() it is needed to use gtk_fixed_move() to move the specified control in the fixed widget of window where the control is located.
"Instead of using GUIGetRelRect() it is needed to use g_object_get_property() to read the coordinates of the control, and use gtk_widget_get_size_request() to get its size."
Time needed for porting: 2 hours.
Depending upon the flag gtk_widget_show_all() or gtk_widget_hide_all() function should be called.
"Property ""visible"" should be used to test if the widget is visible."
Time needed for porting: 1 hour.
This step requires about 27 hours.
Common text functions Below is the list of the common text related functions.
Depending on the class of the given widget gtk_entry_set_text() or gtk_label_set_label() should be used.
Time needed for porting: 4 hours.
GUIClearText Clears the text.
GUISetText() should be called to perform the operation.
Time needed for porting: 0.5 hour.
GUISelectAll Selects the text within the controls GUI_EDIT or GUI_EDIT_COMBOBOX.
Should call gtk_editable_select() applied to a valid GtkEntry widget to perform the operation.
Time needed for porting: 4 hours.
GUISetEditSelect Selects the portion of text within controls GUI_EDIT or GUI_EDIT_COMBOBOX.
Should call gtk_editable_select() applied to valid GtkEntry widget to perform the operation.
GUIGetEditSelect Finds out the portion of the text selected within GUI_EDIT or GUI_EDIT_COMBOBOX.
Should call gtk_editable_get_selection_bounds() and gtk_editable_get_chars() applied to valid GtkEntry widget to perform the operation.
Time needed for porting: 4 hours.
"Additional investigation is needed in order to find out, whether the current memory allocation algorithm in Open Watcom GUI Library can be reused in the GTK port."
Time needed for porting: 1 hour.
"Summary 15.5 hours are needed for porting activity and, additionally, approximately 8.5 hours are needed for testing and tuning."
This step requires about 24 hours.
Special dialogs functions Below is the list of functions related to special dialogs with their sub-calls.
Displays a message and gets the response.
Identical functionality could be achieved by using GTK's message dialog via gtk_message_new().
Time needed for porting: 4 hours.
"DlgOpen Calls GUICreateDilog(), formatting locations to look good on every OS."
Some effort to make the controls look similar in Linux to all other systems will be needed.
Time needed for porting: 4 hours GUIGetDlgTextMetrics Gets the metrics of the dialog font.
GUIGetSystemMetrics Selects the text within GUI_EDIT or GUI_EDIT_COMBOBOX.
Instead of calling _wpi_getsystemmetrics() the function should call various GTK functions to get different values.
Time needed for porting: 10 hours.
Some effort to make the controls look similar in all systems will be needed.
GUIGetEditSelect Finds out the portion of text selected within GUI_EDIT or GUI_EDIT_COMBOBOX.
Should call gtk_editable_get_selection_bounds() and gtk_editable_get_chars() applied to valid GtkEntry widget to perform the operation.
Time needed for porting: 4 hours.
GUIDlgBuffGetText Gets text from the control into a buffer.
Additional research should be performed in order to find out whether Open Watcom GUI Library memory allocation algorithm can be reused in the GTK port.
Summary 27 hours are needed for porting activity and approximately 44 more hours are needed for testing and tuning.
This step requires about 71 hour.
WGL windows of the GTK port mush have GTKScroledWindow in them.
This should contain GTKViewPort that contains GtkFixed.
"Since the scroll bars behavior is automatic, there is no possibility to set/get scroll bar range values."
Required values could be achieved by getting width and height of the GtkFixed widget.
Setting range of a scroll means resizing of the GtkFixed widget.
Page size could be obtained from size of the GtkViewPort widget.
Summary 16 hours are needed for the porting activity and 16 more hours are required for for testing and tuning.
This step requires about 32 hours.
Status window functions GUIResizeStatusWindow() Common guidelines WGL windows of the GTK port mush have GTKStatus widget in them.
All these functions will interact with it.
GUICreateStatusWindow Creates a status window.
Should make the GtkStatus visible using gtk_widget_show().
Time needed for porting: 1 hour.
GUICloseStatusWindow Closes the status window.
Should make the GtkStatus invisible using Gtk_widget_hide() Time needed for porting: 1 hour.
GUIDrawStatusText Draws the text to the status window.
Should use gtk_status_push().
Time needed for porting: 1 hour.
GUIResizeStatusWindow Resizes the status window.
It is impossible to change X position of the GtkStatus in our layout; however it is never changed through all Open Watcom sources.
"In addition, it isn't necessary to change vertical size of the bar because it is done automatically."
"So, this function can be empty in the GTK port."
Time needed for porting: 1 hour.
"Summary 4 hours are required for the porting activity and, additionally, 4 hours are required for testing and tuning."
This step requires about 8 hours.
All these functions will interact with it.
GUICreateFloatToolBar Does the same as GUICreateToolbar() which is described below.
GUICreateToolBar Creates a tool bar.
Should make the GtkHandleBox visible using gtk_widget_show() Time needed for porting: 1 hour.
GUICloseToolBar Closes the status window.
Should make the GtkHandleBox invisible using gtk_widget_hide() Time needed for porting: 1 hour.
GUIChangeToolBar Changes the tool bar.
Makes it fixed or floating.
To make the tool bar fixed it is needed to make GtkHandleBox invisible and set parent of the GtkToobar to parent of GtkHandleBox.
To reverse the operation it is needed to make the GtkHandleBox visible and set parent of the GtkToobar to the GtkHandleBox widget.
Time needed for porting: 2 hours.
"Summary 4 hours are needed for porting activity and, additionally, approximately 6 more hours are needed for testing and tuning."
This step requires about 10 hours.
Common guidelines WGL windows of the GTK port must have GtkMenuBar widget in them.
All these functions will interact with it.
GUIAppendMenu Appends a menu to the menu bar.
Floating status could be adjusted via ?tear-off? state of the GtkMenu.
"Additionally, the menu and all items should be added in global controls table via GUIControlInsert(), since GTK doesn't allow assigning ID to the menu items."
GUIAppendMenuByOffset Appends sub menu to the menu.
"Additionally, the menu and all items should be added in global controls table via GUIControlInsert, since GTK doesn't allow assigning ID for the menu items."
Time needed for porting: 2 hours.
GUIInsertMenu Inserts a menu into the menu bar.
Floating status could be adjusted via tear-off state.
"Additionally, the menu and all items should be added to the global controls table via GUIControlInsert(), since GTK doesn't allow to assign ID for the menu items."
The GtkMenuItem widget can be obtained via GUIGetControlByID().
Time needed for porting: 2 hours.
GUIEnableMenuItem Checks/unchecks menu item.
The GtkMenuItem widget can be obtained via GUIGetControlByID().
Time needed for porting: 2 hours.
GUISetMenuText Change the text of a menu item.
The GtkMenuItem widget can be obtained via GUIGetControlByID().
The GtkLabel widget could be obtained via gtk_bin_get_child().
Time needed for porting: 2 hours.
GUISetHintText Sets the hint for the menu item.
The GtkMenuItem widget can be obtained via GUIGetControlByID().
The GtkLabel widget can be obtained via gtk_bin_get_child().
Time needed for porting: 2 hours.
GUIDeleteMenuItem Delete a menu item for a pull down menu.
The GtkMenuItem widget can be obtained via GUIGetControlByID().
Time needed for porting: 2 hours.
GUIResetMenus Resets the entire menu structure for a window.
The function should destroy and create new GtkMenuBar.
"And, then, build and add given menu structure."
Time needed for porting: 6 hours.
GUIEnableMDIMenus Enables/disables the MDI menus.
"Since the ""Window in Window"" MDI model is not possible in GTK."
This function should do nothing for the GTK port.
Time needed for porting: 0.5 hour.
GUICreateFloatingPopup Creates a floating popup menu.
"Should create a GtkMenu widget, and call GUITrackFloatingPopup."
Time needed for porting: 2 hours.
GUITrackFloatingPopup Tracks a floating popup menu.
The GtkMenu widget can be obtained via GUIGetControlByID().
Time needed for porting: 2 hours.
Then g_list_length() should be applied to the list to obtain a number of elements in the list.
The GtkMenu widget can be obtained via GUIGetControlByID().
GUIAppendMenuToPopup Appends sub menu to the given popup menu.
GUIAppendMenu() should be called in this function to perform the operation.
Time needed for porting: 2 hours.
GUIInsertMenuToPopup Inserts sub menu to the given popup menu.
GUIAppendMenuByOffset() should be called in this function to perform the operation.
GUISetWindowText Set window caption.
Time needed for porting: 2 hours GUIGetWindowText Get window caption.
Time needed for porting: 2 hours GUIGetWindowTextLength Get caption text length.
"In GTK the length of a char, pointer to which is returned by gtk_get_window_title() can be measured."
Time needed for porting: 2 hours GUIGetExtentX Finds X extent of the given string in current font.
Width of the given string in specified window could be obtained in the following way.
Time needed for porting: 2 hours.
GUIGetExtentY Finds Y extent of the given string in current font.
Height of the given string in specified window could be obtained in the following way.
GUIGetControlExtentX Finds X extent of the given string in font of the given control.
Width of the given string in specified window could be obtained in the following way.
GUIGetControlExtentY Finds Y extent of the given string in font of the given control.
Height of the given string in specified window could be obtained in the following way.
GUIGetStringPos Returns offset (in characters) of the given point if string is offset from left by given amount.
Calling of GUIGetTheDC() and DoReturn should be eliminated in this function as GTK operates at a higher level.
"Summary 15 hours are needed for porting activity and, additionally, approximately 15 hours are needed for testing and tuning."
This step requires about 30 hours.
GUIDrawLine and GUIDrawLineRGB Draw a line given a gui_attr or RGB and style information.
"These functions use DrawLine() function which should be rewritten using gtk_paint_hline(), gtk_paint_vline() or gtk_paint_polygon()."
GUIDrawBar Draws the outline of a rectangle given a gui_attr.
The function should use gtk_paint_bar() to perform the operation.
Time needed for porting: 4 hour.
"Summary 8 hours are needed for porting activity and, additionally, approximately 16 hours are needed for testing and tuning."
"So, GUIFontsSupported() should always return TRUE."
Time needed for porting: 0.5 hours.
GUIChangeFont Gets font choice from user and changes the font of the given window.
The function could be ported implemented with GUIGetFontFromUser() and GUISetFontInfo().
Time needed for porting: 2 hours.
pango_font_description_to_string() applied to a style attribute of the given window should be used to perform the operation.
GUISetFontInfo Sets the font information for a window.
